Program:
  statements*=Statement
;

Statement:
  PrintStatement |Initialization | Assignment| ArrayDeclaration | ArrayAssignment | BooleanLiteral | IfStatement | ForLoop | WhileLoop
;

PrintStatement:
  'print' '(' expression=PrintExpression ')'
;

PrintExpression:
  STRING | BooleanLiteral | Expression | ID
;

Initialization:
  'let' varName=ID '=' value=Expression
;

Assignment:
  varName=ID '=' value=Expression
;

ArrayDeclaration:
  'let' varName=ID '=' '[' elements*=Expression (',' elements*=Expression)* ']'
;

ArrayAssignment:
  varName=ID '=' '[' elements*=Expression (',' elements*=Expression)* ']'
;

IfStatement:
  'if' '(' condition=Condition ')' '{'
    statements*=Statement
  '}'
;

WhileLoop:
  'while' '(' condition=Condition ')' '{'
    statements*=Statement
  '}'
;

ForLoop:
  'for' '(' loopVar=ID 'in' 'range' '(' rangeStart=INT ',' rangeEnd=INT ')' ')' '{'
    statements*=Statement
  '}'
;

Condition:
  left=Expression comp=Comparison right=Expression
;

Expression:
  Term (('+' | '-') Term)*
;

Term:
  Factor (('*' | '/' | '%') Factor)*
;

Factor:
  INT | ID | STRING | BooleanLiteral | '(' Expression ')'
;

Comparison:
  '>' | '<' | '>=' | '<=' | '==' | '!='
;

Comment:
  /\/\/.*$/
;

STRING:
  /"([^"]*)"/
;

ID:
  /[a-zA-Z_][a-zA-Z0-9_]*/
;

INT:
  /[0-9]+/
;

BooleanLiteral:
  'true' | 'false'
;