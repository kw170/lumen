Program:
  statements*=Statement
;

Statement:
  Quit | EcoSortMethod | PrintStatement |Initialization | VariableAssignment
  | ArrayDeclaration | ArrayAssignment | ArrayElementAssignment
  | BooleanLiteral | IfStatement | ForLoop | WhileLoop
  | 'NETWORK.live()'
;

PrintStatement:
  'print' '(' expression=PrintExpression ')'
;

PrintExpression:
  Expression | BooleanLiteral | ID | STRING
;

Initialization:
  'let' varName=ID '=' value=Expression
;

VariableAssignment:
  varName=ID '=' value=Expression
;

ArrayDeclaration:
  'let' varName=ID '=' '[' elements*=Expression (',' elements*=Expression)* ']'
;

ArrayAssignment:
  varName=ID '=' '[' elements*=Expression (',' elements*=Expression)* ']'
;

ArrayElementAssignment:
  varName=ID '[' index=Expression ']' '=' value=Expression
;

ArrayAccess:
  varName=ID '[' index=Expression ']'
;

IfStatement:
  'if' '(' condition=Condition ')' '{'
    statements*=Statement
  '}'
;

WhileLoop:
  'while' '(' condition=Condition ')' '{'
    statements*=Statement
  '}'
;

ForLoop:
  'for' '(' loopVar=ID 'in' 'range' '(' rangeStart=NUMBER ',' rangeEnd=NUMBER ')' ')' '{'
    statements*=Statement
  '}'
;

Condition:
  left=Expression comp=Comparison right=Expression
  | left=Condition logOp=LogicalOp right=Condition
;

Expression:
  left=Term (op=AddOp right=Term)*
;

AddOp:
  '+' | '-'
;

Term:
    left=Factor (op=MulOp right=Factor)*
;

MulOp:
    '*' | '/' | '%'
;

Factor:
  var=LumenFunctionCall
  | var=ArrayAccess
  | var=ArrayLength
  | var=NUMBER
  | string=STRING
  | var=BooleanLiteral
  | var='(' Expression ')'
  | var=ID
;

LumenFunctionCall:
  system=Systems '.' methodName=Function '(' ')'
  | system=Systems '.' methodName=Function '(' index=Expression ')'
;

EcoSortMethod:
  arrayName=ID '.' methodName=Function '(' ')'
;

ArrayLength:
  'len'  '(' varName=ID ')'
;

Function:
  'info' | 'name' | 'count' | 'phys_cores' | 'freq' | 'usage_per_core' | 'usage'
  | 'total' | 'available' | 'sent' | 'recv' | 'temp' | 'ecoSort'
;

Comparison:
  '>' | '<' | '>=' | '<=' | '==' | '!='
;

LogicalOp:
  '&&' | '||'
;

Comment:
  /\/\/.*$/
;

STRING:
  /"([^"]*)"/
;

ID:
  /[a-zA-Z_][a-zA-Z0-9_]*/
;

NUMBER:
  FLOAT | INT
;

INT:
  /[0-9]+/
;

FLOAT:
  /-?\d+\.\d+/
;

BooleanLiteral:
  'true' | 'false'
;

Quit:
  'QUIT'
;


Systems:
  'CPU' | 'MEMORY' | 'NETWORK' | 'GPU' | ID
;